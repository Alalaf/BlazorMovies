@using System.Timers
@typeparam TItem

<div class="blazored-typehead">
    <div class="blazored-typehead-controls">
        <input type="text"
               class="blazored-typehead-input"
               autocomplete="off"
               placeholder="@Placeholder"
               @bind-value="@SearchText"
               @bind-value:event="oninput"
               @onclick="@ShowSuggestions"
               @onfocusout="onfocusout" />

    </div>
    @if (IsSearching)
    {
        <div class="blazored-typehead-results">
            <div class="blazored-typehead-results">
                <span>Loading...</span>
            </div>
        </div>
    }
    else if (ShouldShowSuggestions())
    {
        <div class="blazored-typehead-results">
            @foreach(var item in Suggestions)
            {
                <div @key="item" class="blazored-typehead-results" tabindex="0"
                     @onclick="@(()=>SelectSuggestion(item))"
                     @onmouseover="OnMouseOverSuggestion" @onmouseout="OnMouseOutSuggestion">
                    @ResultTemplate(item)
                </div>
            }
        </div>
    }
    else if (ShowNotFound())
    {
        <div class="blazored-typehead-results">
            @if(NotFoundTemplate != null)
            {
                <div class="blazored-typehead-notfound">
                    @NotFoundTemplate
                </div>
            }
            else
            {
                <div class="blazored-typehead-notfound">
                    No Results Found
                </div>
            }
        </div>
    }

</div>



@code {
    [Parameter] public string Placeholder { get; set; }
    [Parameter] public int minimunlength { get; set; } = 3;
    [Parameter] public int Debounce { get; set; } = 300;
    [Parameter]public Func<string,Task<IEnumerable<TItem>>> SearchMethod { get; set; }
    [Parameter]public RenderFragment<TItem> ResultTemplate { get; set; }
    [Parameter]public RenderFragment<TItem> NotFoundTemplate { get; set; }
    [Parameter]public EventCallback<TItem> ValueChanged { get; set; }

    bool IsMouseInSuggestions = false;
    private bool IsSearching = false;
    private bool IsShowingSuggestions = false;
    private string _SearchText = string.Empty;
    private Timer _debounceTimer;
    protected TItem[] Suggestions { get; set; } = new TItem[0];

    protected override void OnInitialized()
    {
        _debounceTimer = new Timer();
        _debounceTimer.Interval = Debounce;
        _debounceTimer.AutoReset = false;
        _debounceTimer.Elapsed += Search;
        base.OnInitialized();
    }

    private void OnMouseOverSuggestion()
    {
        IsMouseInSuggestions = true;
    }

    private void OnMouseOutSuggestion()
    {
        IsMouseInSuggestions = false;
    }

    private bool ShowNotFound()
    {
        return !Suggestions.Any() && IsShowingSuggestions;
    }

    private async Task SelectSuggestion(TItem item)
    {
        SearchText = "";
        await ValueChanged.InvokeAsync(item);
    }

    protected async void Search(Object source, ElapsedEventArgs e)
    {
        IsSearching = true;
        IsShowingSuggestions = false;
        await InvokeAsync(StateHasChanged);

        Suggestions = (await SearchMethod.Invoke(_SearchText)).ToArray();

        IsSearching = false;
        IsShowingSuggestions = true;

        await InvokeAsync(StateHasChanged);
    }

    private String SearchText
    {
        get => _SearchText;
        set
        {
            _SearchText = value;

            if (value.Length == 0)
            {
                IsShowingSuggestions = false;
                _debounceTimer.Stop();
                Suggestions = new TItem[0];
            }
            else if (value.Length >= minimunlength)
            {
                _debounceTimer.Stop();
                _debounceTimer.Start();
            }
        }

    }

    private void ShowSuggestions()
    {
        if (Suggestions.Any())
        {
            IsShowingSuggestions = true;
        }
    }

    private void onfocusout()
    {
        if (!IsMouseInSuggestions)
        {
            IsShowingSuggestions = false;
        }
        
    }

    private bool ShouldShowSuggestions()
    {
        return IsShowingSuggestions && Suggestions.Any();
    }

}
